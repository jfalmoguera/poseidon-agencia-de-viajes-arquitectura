import { Directive, Input, NgModule, TemplateRef, ViewContainerRef, } from '@angular/core';
import { isString } from '../views/types';
import { ViewService } from '../views/view';
import { DynamicViewComponent } from './dynamic-view.component';
export class DynamicViewDirective {
    constructor(defaultTpl, vcr, viewService) {
        this.defaultTpl = defaultTpl;
        this.vcr = vcr;
        this.viewService = viewService;
    }
    set view(content) {
        this._view = content;
        this.resolveContentType();
    }
    get view() {
        return this._view;
    }
    ngOnInit() {
        this.resolveContentType();
    }
    resolveContentType() {
        var _a;
        (_a = this.viewRef) === null || _a === void 0 ? void 0 : _a.destroy();
        if (isString(this.view)) {
            this.viewRef = this.viewService.createComponent(DynamicViewComponent, {
                vcr: this.vcr,
                injector: this.injector,
            });
            this.viewRef.setInput('content', this.view).detectChanges();
        }
        else {
            this.viewRef = this.viewService.createView(this.view || this.defaultTpl, {
                vcr: this.vcr,
                injector: this.injector,
                context: this.context,
            });
        }
    }
    ngOnDestroy() {
        var _a;
        (_a = this.viewRef) === null || _a === void 0 ? void 0 : _a.destroy();
    }
}
DynamicViewDirective.decorators = [
    { type: Directive, args: [{
                selector: '[dynamicView]',
            },] }
];
DynamicViewDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ViewService }
];
DynamicViewDirective.propDecorators = {
    view: [{ type: Input, args: ['dynamicView',] }],
    injector: [{ type: Input, args: ['dynamicViewInjector',] }],
    context: [{ type: Input, args: ['dynamicViewContext',] }]
};
export class DynamicViewModule {
}
DynamicViewModule.decorators = [
    { type: NgModule, args: [{
                declarations: [DynamicViewDirective, DynamicViewComponent],
                exports: [DynamicViewDirective],
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy12aWV3LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nbmVhdC9vdmVydmlldy9zcmMvbGliL2R5bmFtaWMtdmlldy9keW5hbWljLXZpZXcuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCxTQUFTLEVBRVQsS0FBSyxFQUNMLFFBQVEsRUFHUixXQUFXLEVBQ1gsZ0JBQWdCLEdBQ2pCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBb0IsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU1QyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUtoRSxNQUFNLE9BQU8sb0JBQW9CO0lBZS9CLFlBQW9CLFVBQTRCLEVBQVUsR0FBcUIsRUFBVSxXQUF3QjtRQUE3RixlQUFVLEdBQVYsVUFBVSxDQUFrQjtRQUFVLFFBQUcsR0FBSCxHQUFHLENBQWtCO1FBQVUsZ0JBQVcsR0FBWCxXQUFXLENBQWE7SUFBRyxDQUFDO0lBZHJILElBQ0ksSUFBSSxDQUFDLE9BQWdCO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFNRCxJQUFJLElBQUk7UUFDTixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUlELFFBQVE7UUFDTixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRUQsa0JBQWtCOztRQUNoQixNQUFBLElBQUksQ0FBQyxPQUFPLDBDQUFFLE9BQU8sRUFBRSxDQUFDO1FBQ3hCLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN2QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLG9CQUFvQixFQUFFO2dCQUNwRSxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7Z0JBQ2IsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO2FBQ3hCLENBQUMsQ0FBQztZQUNGLElBQUksQ0FBQyxPQUF5QyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQ2hHO2FBQU07WUFDTCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDdkUsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO2dCQUNiLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtnQkFDdkIsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO2FBQ3RCLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUVELFdBQVc7O1FBQ1QsTUFBQSxJQUFJLENBQUMsT0FBTywwQ0FBRSxPQUFPLEVBQUUsQ0FBQztJQUMxQixDQUFDOzs7WUEzQ0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxlQUFlO2FBQzFCOzs7WUFWQyxXQUFXO1lBQ1gsZ0JBQWdCO1lBR1QsV0FBVzs7O21CQVFqQixLQUFLLFNBQUMsYUFBYTt1QkFLbkIsS0FBSyxTQUFDLHFCQUFxQjtzQkFDM0IsS0FBSyxTQUFDLG9CQUFvQjs7QUF3QzdCLE1BQU0sT0FBTyxpQkFBaUI7OztZQUo3QixRQUFRLFNBQUM7Z0JBQ1IsWUFBWSxFQUFFLENBQUMsb0JBQW9CLEVBQUUsb0JBQW9CLENBQUM7Z0JBQzFELE9BQU8sRUFBRSxDQUFDLG9CQUFvQixDQUFDO2FBQ2hDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIERpcmVjdGl2ZSxcbiAgSW5qZWN0b3IsXG4gIElucHV0LFxuICBOZ01vZHVsZSxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIFRlbXBsYXRlUmVmLFxuICBWaWV3Q29udGFpbmVyUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRlbnQsIFZpZXdSZWYsIGlzU3RyaW5nIH0gZnJvbSAnLi4vdmlld3MvdHlwZXMnO1xuaW1wb3J0IHsgVmlld1NlcnZpY2UgfSBmcm9tICcuLi92aWV3cy92aWV3JztcbmltcG9ydCB7IENvbXBSZWYgfSBmcm9tICcuLi92aWV3cy9jb21wLXJlZic7XG5pbXBvcnQgeyBEeW5hbWljVmlld0NvbXBvbmVudCB9IGZyb20gJy4vZHluYW1pYy12aWV3LmNvbXBvbmVudCc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tkeW5hbWljVmlld10nLFxufSlcbmV4cG9ydCBjbGFzcyBEeW5hbWljVmlld0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgQElucHV0KCdkeW5hbWljVmlldycpXG4gIHNldCB2aWV3KGNvbnRlbnQ6IENvbnRlbnQpIHtcbiAgICB0aGlzLl92aWV3ID0gY29udGVudDtcbiAgICB0aGlzLnJlc29sdmVDb250ZW50VHlwZSgpO1xuICB9XG4gIEBJbnB1dCgnZHluYW1pY1ZpZXdJbmplY3RvcicpIGluamVjdG9yOiBJbmplY3RvcjtcbiAgQElucHV0KCdkeW5hbWljVmlld0NvbnRleHQnKSBjb250ZXh0OiBhbnk7XG5cbiAgcHJpdmF0ZSB2aWV3UmVmOiBWaWV3UmVmO1xuICBwcml2YXRlIF92aWV3OiBDb250ZW50O1xuICBnZXQgdmlldygpIHtcbiAgICByZXR1cm4gdGhpcy5fdmlldztcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZGVmYXVsdFRwbDogVGVtcGxhdGVSZWY8YW55PiwgcHJpdmF0ZSB2Y3I6IFZpZXdDb250YWluZXJSZWYsIHByaXZhdGUgdmlld1NlcnZpY2U6IFZpZXdTZXJ2aWNlKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMucmVzb2x2ZUNvbnRlbnRUeXBlKCk7XG4gIH1cblxuICByZXNvbHZlQ29udGVudFR5cGUoKSB7XG4gICAgdGhpcy52aWV3UmVmPy5kZXN0cm95KCk7XG4gICAgaWYgKGlzU3RyaW5nKHRoaXMudmlldykpIHtcbiAgICAgIHRoaXMudmlld1JlZiA9IHRoaXMudmlld1NlcnZpY2UuY3JlYXRlQ29tcG9uZW50KER5bmFtaWNWaWV3Q29tcG9uZW50LCB7XG4gICAgICAgIHZjcjogdGhpcy52Y3IsXG4gICAgICAgIGluamVjdG9yOiB0aGlzLmluamVjdG9yLFxuICAgICAgfSk7XG4gICAgICAodGhpcy52aWV3UmVmIGFzIENvbXBSZWY8RHluYW1pY1ZpZXdDb21wb25lbnQ+KS5zZXRJbnB1dCgnY29udGVudCcsIHRoaXMudmlldykuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZpZXdSZWYgPSB0aGlzLnZpZXdTZXJ2aWNlLmNyZWF0ZVZpZXcodGhpcy52aWV3IHx8IHRoaXMuZGVmYXVsdFRwbCwge1xuICAgICAgICB2Y3I6IHRoaXMudmNyLFxuICAgICAgICBpbmplY3RvcjogdGhpcy5pbmplY3RvcixcbiAgICAgICAgY29udGV4dDogdGhpcy5jb250ZXh0LFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy52aWV3UmVmPy5kZXN0cm95KCk7XG4gIH1cbn1cblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbRHluYW1pY1ZpZXdEaXJlY3RpdmUsIER5bmFtaWNWaWV3Q29tcG9uZW50XSxcbiAgZXhwb3J0czogW0R5bmFtaWNWaWV3RGlyZWN0aXZlXSxcbn0pXG5leHBvcnQgY2xhc3MgRHluYW1pY1ZpZXdNb2R1bGUge31cbiJdfQ==