import { ApplicationRef, ComponentFactoryResolver, Injectable, Injector, } from '@angular/core';
import { isComponent, isString, isTemplateRef } from './types';
import { TplRef } from './template-ref';
import { StringRef } from './string-ref';
import { CompRef } from './comp-ref';
import * as i0 from "@angular/core";
export class ViewService {
    constructor(resolver, injector, appRef) {
        this.resolver = resolver;
        this.injector = injector;
        this.appRef = appRef;
    }
    createComponent(component, options = {}) {
        return new CompRef({
            component,
            vcr: options.vcr,
            injector: options.injector || this.injector,
            appRef: this.appRef,
            resolver: this.resolver,
        });
    }
    createTemplate(tpl, options = {}) {
        return new TplRef({
            vcr: options.vcr,
            appRef: this.appRef,
            tpl,
            context: options.context,
        });
    }
    createView(content, viewOptions = {}) {
        if (isTemplateRef(content)) {
            return this.createTemplate(content, viewOptions);
        }
        else if (isComponent(content)) {
            return this.createComponent(content, viewOptions);
        }
        else if (isString(content)) {
            return new StringRef(content);
        }
        else {
            throw 'Type of content is not supported';
        }
    }
}
ViewService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ViewService_Factory() { return new ViewService(i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i0.ApplicationRef)); }, token: ViewService, providedIn: "root" });
ViewService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
ViewService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: ApplicationRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nbmVhdC9vdmVydmlldy9zcmMvbGliL3ZpZXdzL3ZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLGNBQWMsRUFDZCx3QkFBd0IsRUFDeEIsVUFBVSxFQUNWLFFBQVEsR0FJVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQVcsV0FBVyxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQVcsTUFBTSxTQUFTLENBQUM7QUFDakYsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDekMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQzs7QUFpQnJDLE1BQU0sT0FBTyxXQUFXO0lBQ3RCLFlBQW9CLFFBQWtDLEVBQVUsUUFBa0IsRUFBVSxNQUFzQjtRQUE5RixhQUFRLEdBQVIsUUFBUSxDQUEwQjtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVU7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFnQjtJQUFHLENBQUM7SUFFdEgsZUFBZSxDQUFJLFNBQWtCLEVBQUUsVUFBMkIsRUFBRTtRQUNsRSxPQUFPLElBQUksT0FBTyxDQUFJO1lBQ3BCLFNBQVM7WUFDVCxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUc7WUFDaEIsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVE7WUFDM0MsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ25CLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtTQUN4QixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsY0FBYyxDQUFJLEdBQW1CLEVBQUUsVUFBK0IsRUFBRTtRQUN0RSxPQUFPLElBQUksTUFBTSxDQUFDO1lBQ2hCLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRztZQUNoQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDbkIsR0FBRztZQUNILE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTztTQUN6QixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsVUFBVSxDQUFDLE9BQWdCLEVBQUUsY0FBb0UsRUFBRTtRQUNqRyxJQUFJLGFBQWEsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUMxQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQ2xEO2FBQU0sSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDL0IsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsQ0FBQztTQUNuRDthQUFNLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQzVCLE9BQU8sSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDL0I7YUFBTTtZQUNMLE1BQU0sa0NBQWtDLENBQUM7U0FDMUM7SUFDSCxDQUFDOzs7O1lBakNGLFVBQVUsU0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7OztZQTFCaEMsd0JBQXdCO1lBRXhCLFFBQVE7WUFIUixjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQXBwbGljYXRpb25SZWYsXG4gIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgSW5qZWN0YWJsZSxcbiAgSW5qZWN0b3IsXG4gIFRlbXBsYXRlUmVmLFxuICBUeXBlLFxuICBWaWV3Q29udGFpbmVyUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRlbnQsIGlzQ29tcG9uZW50LCBpc1N0cmluZywgaXNUZW1wbGF0ZVJlZiwgVmlld1JlZiB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgVHBsUmVmIH0gZnJvbSAnLi90ZW1wbGF0ZS1yZWYnO1xuaW1wb3J0IHsgU3RyaW5nUmVmIH0gZnJvbSAnLi9zdHJpbmctcmVmJztcbmltcG9ydCB7IENvbXBSZWYgfSBmcm9tICcuL2NvbXAtcmVmJztcblxuaW50ZXJmYWNlIF9WaWV3T3B0aW9ucyB7XG4gIHZjcj86IFZpZXdDb250YWluZXJSZWYgfCB1bmRlZmluZWQ7XG59XG5cbmludGVyZmFjZSBDb21wVmlld09wdGlvbnMgZXh0ZW5kcyBfVmlld09wdGlvbnMge1xuICBpbmplY3Rvcj86IEluamVjdG9yIHwgdW5kZWZpbmVkO1xufVxuXG5pbnRlcmZhY2UgVGVtcGxhdGVWaWV3T3B0aW9ucyBleHRlbmRzIF9WaWV3T3B0aW9ucyB7XG4gIGNvbnRleHQ/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+IHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgdHlwZSBWaWV3T3B0aW9ucyA9IF9WaWV3T3B0aW9ucyAmIENvbXBWaWV3T3B0aW9ucyAmIFRlbXBsYXRlVmlld09wdGlvbnM7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgVmlld1NlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBwcml2YXRlIGFwcFJlZjogQXBwbGljYXRpb25SZWYpIHt9XG5cbiAgY3JlYXRlQ29tcG9uZW50PEM+KGNvbXBvbmVudDogVHlwZTxDPiwgb3B0aW9uczogQ29tcFZpZXdPcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gbmV3IENvbXBSZWY8Qz4oe1xuICAgICAgY29tcG9uZW50LFxuICAgICAgdmNyOiBvcHRpb25zLnZjcixcbiAgICAgIGluamVjdG9yOiBvcHRpb25zLmluamVjdG9yIHx8IHRoaXMuaW5qZWN0b3IsXG4gICAgICBhcHBSZWY6IHRoaXMuYXBwUmVmLFxuICAgICAgcmVzb2x2ZXI6IHRoaXMucmVzb2x2ZXIsXG4gICAgfSk7XG4gIH1cblxuICBjcmVhdGVUZW1wbGF0ZTxDPih0cGw6IFRlbXBsYXRlUmVmPEM+LCBvcHRpb25zOiBUZW1wbGF0ZVZpZXdPcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gbmV3IFRwbFJlZih7XG4gICAgICB2Y3I6IG9wdGlvbnMudmNyLFxuICAgICAgYXBwUmVmOiB0aGlzLmFwcFJlZixcbiAgICAgIHRwbCxcbiAgICAgIGNvbnRleHQ6IG9wdGlvbnMuY29udGV4dCxcbiAgICB9KTtcbiAgfVxuXG4gIGNyZWF0ZVZpZXcoY29udGVudDogQ29udGVudCwgdmlld09wdGlvbnM6IF9WaWV3T3B0aW9ucyAmIENvbXBWaWV3T3B0aW9ucyAmIFRlbXBsYXRlVmlld09wdGlvbnMgPSB7fSk6IFZpZXdSZWYge1xuICAgIGlmIChpc1RlbXBsYXRlUmVmKGNvbnRlbnQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5jcmVhdGVUZW1wbGF0ZShjb250ZW50LCB2aWV3T3B0aW9ucyk7XG4gICAgfSBlbHNlIGlmIChpc0NvbXBvbmVudChjb250ZW50KSkge1xuICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlQ29tcG9uZW50KGNvbnRlbnQsIHZpZXdPcHRpb25zKTtcbiAgICB9IGVsc2UgaWYgKGlzU3RyaW5nKGNvbnRlbnQpKSB7XG4gICAgICByZXR1cm4gbmV3IFN0cmluZ1JlZihjb250ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgJ1R5cGUgb2YgY29udGVudCBpcyBub3Qgc3VwcG9ydGVkJztcbiAgICB9XG4gIH1cbn1cbiJdfQ==