import * as i0 from '@angular/core';
import { Injectable, Directive, ViewContainerRef, Input, TemplateRef, NgModule, ComponentFactoryResolver, Injector, ApplicationRef, Component } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { filter, map } from 'rxjs/operators';

import * as ɵngcc0 from '@angular/core';
class TeleportService {
    constructor() {
        this.outlets = new BehaviorSubject('');
        this.asObservable = this.outlets.asObservable();
        this.ports = new Map();
    }
    outlet$(name) {
        return this.asObservable.pipe(filter(current => current === name), map(name => this.ports.get(name)));
    }
    newOutlet(name) {
        this.outlets.next(name);
    }
}
TeleportService.ɵfac = function TeleportService_Factory(t) { return new (t || TeleportService)(); };
TeleportService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TeleportService_Factory() { return new TeleportService(); }, token: TeleportService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TeleportService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

class TeleportOutletDirective {
    constructor(vcr, service) {
        this.vcr = vcr;
        this.service = service;
    }
    ngOnInit() {
        this.service.ports.set(this.teleportOutlet, this.vcr);
        this.service.newOutlet(this.teleportOutlet);
    }
    ngOnDestroy() {
        this.service.ports.delete(this.teleportOutlet);
    }
}
TeleportOutletDirective.ɵfac = function TeleportOutletDirective_Factory(t) { return new (t || TeleportOutletDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(TeleportService)); };
TeleportOutletDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: TeleportOutletDirective, selectors: [["", "teleportOutlet", ""]], inputs: { teleportOutlet: "teleportOutlet" } });
TeleportOutletDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: TeleportService }
];
TeleportOutletDirective.propDecorators = {
    teleportOutlet: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TeleportOutletDirective, [{
        type: Directive,
        args: [{
                selector: '[teleportOutlet]'
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: TeleportService }]; }, { teleportOutlet: [{
            type: Input
        }] }); })();

class TeleportDirective {
    constructor(tpl, service) {
        this.tpl = tpl;
        this.service = service;
    }
    ngOnInit() {
        this.subscription = this.service.outlet$(this.teleportTo).subscribe((outlet) => {
            if (outlet) {
                this.viewRef = outlet.createEmbeddedView(this.tpl);
            }
        });
    }
    ngOnDestroy() {
        var _a, _b;
        (_a = this.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        (_b = this.viewRef) === null || _b === void 0 ? void 0 : _b.destroy();
    }
}
TeleportDirective.ɵfac = function TeleportDirective_Factory(t) { return new (t || TeleportDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(TeleportService)); };
TeleportDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: TeleportDirective, selectors: [["", "teleportTo", ""]], inputs: { teleportTo: "teleportTo" } });
TeleportDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: TeleportService }
];
TeleportDirective.propDecorators = {
    teleportTo: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TeleportDirective, [{
        type: Directive,
        args: [{
                selector: '[teleportTo]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: TeleportService }]; }, { teleportTo: [{
            type: Input
        }] }); })();
class TeleportModule {
}
TeleportModule.ɵfac = function TeleportModule_Factory(t) { return new (t || TeleportModule)(); };
TeleportModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: TeleportModule });
TeleportModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TeleportModule, [{
        type: NgModule,
        args: [{
                declarations: [TeleportDirective, TeleportOutletDirective],
                exports: [TeleportDirective, TeleportOutletDirective]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TeleportModule, { declarations: [TeleportDirective, TeleportOutletDirective], exports: [TeleportDirective, TeleportOutletDirective] }); })();

function isTemplateRef(value) {
    return value instanceof TemplateRef;
}
function isComponent(value) {
    return typeof value === 'function';
}
function isString(value) {
    return typeof value === 'string';
}

class TplRef {
    constructor(args) {
        this.args = args;
        this.wrapper = null;
        if (this.args.vcr) {
            this.viewRef = this.args.vcr.createEmbeddedView(this.args.tpl, this.args.context || {});
            this.viewRef.detectChanges();
        }
        else {
            this.viewRef = this.args.tpl.createEmbeddedView(this.args.context || {});
            this.viewRef.detectChanges();
            this.args.appRef.attachView(this.viewRef);
        }
    }
    detectChanges() {
        this.viewRef.detectChanges();
    }
    getElement() {
        const rootNodes = this.viewRef.rootNodes;
        if (rootNodes.length === 1 && rootNodes[0] === Node.ELEMENT_NODE) {
            this.element = rootNodes[0];
        }
        else {
            this.element = document.createElement('div');
            this.element.append(...rootNodes);
        }
        return this.element;
    }
    destroy() {
        var _a;
        if (this.viewRef.rootNodes[0] !== 1) {
            (_a = this.element) === null || _a === void 0 ? void 0 : _a.parentNode.removeChild(this.element);
            this.element = null;
        }
        if (!this.args.vcr) {
            this.args.appRef.detachView(this.viewRef);
        }
        this.viewRef.destroy();
        this.viewRef = null;
    }
}

class StringRef {
    constructor(value) {
        this.value = value;
    }
    getElement() {
        return this.value;
    }
    detectChanges() { }
    destroy() { }
}

class CompRef {
    constructor(args) {
        this.args = args;
        const factory = this.args.resolver.resolveComponentFactory(this.args.component);
        if (this.args.vcr) {
            this.compRef = this.args.vcr.createComponent(factory, this.args.vcr.length, args.injector || this.args.vcr.injector);
        }
        else {
            this.compRef = factory.create(this.args.injector);
            this.args.appRef.attachView(this.compRef.hostView);
        }
    }
    get ref() {
        return this.compRef;
    }
    setInput(input, value) {
        this.compRef.instance[input] = value;
        return this;
    }
    setInputs(inputs) {
        Object.keys(inputs).forEach((input) => {
            this.compRef.instance[input] = inputs[input];
        });
        return this;
    }
    detectChanges() {
        this.compRef.hostView.detectChanges();
        return this;
    }
    appendTo(container) {
        container.appendChild(this.getElement());
        return this;
    }
    removeFrom(container) {
        container.removeChild(this.getElement());
        return this;
    }
    getRawContent() {
        return this.getElement().outerHTML;
    }
    getElement() {
        return this.compRef.location.nativeElement;
    }
    destroy() {
        this.compRef.destroy();
        !this.args.vcr && this.args.appRef.detachView(this.compRef.hostView);
        this.compRef = null;
    }
}

class ViewService {
    constructor(resolver, injector, appRef) {
        this.resolver = resolver;
        this.injector = injector;
        this.appRef = appRef;
    }
    createComponent(component, options = {}) {
        return new CompRef({
            component,
            vcr: options.vcr,
            injector: options.injector || this.injector,
            appRef: this.appRef,
            resolver: this.resolver,
        });
    }
    createTemplate(tpl, options = {}) {
        return new TplRef({
            vcr: options.vcr,
            appRef: this.appRef,
            tpl,
            context: options.context,
        });
    }
    createView(content, viewOptions = {}) {
        if (isTemplateRef(content)) {
            return this.createTemplate(content, viewOptions);
        }
        else if (isComponent(content)) {
            return this.createComponent(content, viewOptions);
        }
        else if (isString(content)) {
            return new StringRef(content);
        }
        else {
            throw 'Type of content is not supported';
        }
    }
}
ViewService.ɵfac = function ViewService_Factory(t) { return new (t || ViewService)(ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.ApplicationRef)); };
ViewService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ViewService_Factory() { return new ViewService(i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i0.ApplicationRef)); }, token: ViewService, providedIn: "root" });
ViewService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: ApplicationRef }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ViewService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.Injector }, { type: ɵngcc0.ApplicationRef }]; }, null); })();

class DynamicViewComponent {
}
DynamicViewComponent.ɵfac = function DynamicViewComponent_Factory(t) { return new (t || DynamicViewComponent)(); };
DynamicViewComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DynamicViewComponent, selectors: [["dynamic-view"]], inputs: { content: "content" }, decls: 1, vars: 1, consts: [[3, "innerHTML"]], template: function DynamicViewComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("innerHTML", ctx.content, ɵngcc0.ɵɵsanitizeHtml);
    } }, encapsulation: 2 });
DynamicViewComponent.propDecorators = {
    content: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicViewComponent, [{
        type: Component,
        args: [{
                selector: 'dynamic-view',
                template: ` <div [innerHTML]="content"></div> `
            }]
    }], null, { content: [{
            type: Input
        }] }); })();

class DynamicViewDirective {
    constructor(defaultTpl, vcr, viewService) {
        this.defaultTpl = defaultTpl;
        this.vcr = vcr;
        this.viewService = viewService;
    }
    set view(content) {
        this._view = content;
        this.resolveContentType();
    }
    get view() {
        return this._view;
    }
    ngOnInit() {
        this.resolveContentType();
    }
    resolveContentType() {
        var _a;
        (_a = this.viewRef) === null || _a === void 0 ? void 0 : _a.destroy();
        if (isString(this.view)) {
            this.viewRef = this.viewService.createComponent(DynamicViewComponent, {
                vcr: this.vcr,
                injector: this.injector,
            });
            this.viewRef.setInput('content', this.view).detectChanges();
        }
        else {
            this.viewRef = this.viewService.createView(this.view || this.defaultTpl, {
                vcr: this.vcr,
                injector: this.injector,
                context: this.context,
            });
        }
    }
    ngOnDestroy() {
        var _a;
        (_a = this.viewRef) === null || _a === void 0 ? void 0 : _a.destroy();
    }
}
DynamicViewDirective.ɵfac = function DynamicViewDirective_Factory(t) { return new (t || DynamicViewDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ViewService)); };
DynamicViewDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: DynamicViewDirective, selectors: [["", "dynamicView", ""]], inputs: { view: ["dynamicView", "view"], injector: ["dynamicViewInjector", "injector"], context: ["dynamicViewContext", "context"] } });
DynamicViewDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ViewService }
];
DynamicViewDirective.propDecorators = {
    view: [{ type: Input, args: ['dynamicView',] }],
    injector: [{ type: Input, args: ['dynamicViewInjector',] }],
    context: [{ type: Input, args: ['dynamicViewContext',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicViewDirective, [{
        type: Directive,
        args: [{
                selector: '[dynamicView]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }, { type: ViewService }]; }, { view: [{
            type: Input,
            args: ['dynamicView']
        }], injector: [{
            type: Input,
            args: ['dynamicViewInjector']
        }], context: [{
            type: Input,
            args: ['dynamicViewContext']
        }] }); })();
class DynamicViewModule {
}
DynamicViewModule.ɵfac = function DynamicViewModule_Factory(t) { return new (t || DynamicViewModule)(); };
DynamicViewModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DynamicViewModule });
DynamicViewModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DynamicViewModule, [{
        type: NgModule,
        args: [{
                declarations: [DynamicViewDirective, DynamicViewComponent],
                exports: [DynamicViewDirective]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DynamicViewModule, { declarations: [DynamicViewDirective, DynamicViewComponent], exports: [DynamicViewDirective] }); })();

/*
 * Public API Surface of overview
 */

/**
 * Generated bundle index. Do not edit.
 */

export { CompRef, DynamicViewDirective, DynamicViewModule, StringRef, TeleportDirective, TeleportModule, TeleportOutletDirective, TplRef, ViewService, isComponent, isString, isTemplateRef, TeleportService as ɵa, DynamicViewComponent as ɵb };

//# sourceMappingURL=ngneat-overview.js.map