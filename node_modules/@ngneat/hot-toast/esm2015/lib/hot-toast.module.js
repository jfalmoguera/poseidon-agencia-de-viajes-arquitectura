import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { DynamicViewModule } from '@ngneat/overview';
import { AnimatedIconComponent } from './components/animated-icon/animated-icon.component';
import { HotToastComponent } from './components/hot-toast/hot-toast.component';
import { CheckMarkComponent } from './components/indicator/icons/checkmark/checkmark.component';
import { ErrorComponent } from './components/indicator/icons/error/error.component';
import { LoaderComponent } from './components/indicator/icons/loader/loader.component';
import { IndicatorComponent } from './components/indicator/indicator.component';
import { ToastConfig } from './hot-toast.model';
import { HotToastContainerComponent } from './components/hot-toast-container/hot-toast-container.component';
import { WarningComponent } from './components/indicator/icons/warning/warning.component';
export class HotToastModule {
    static forRoot(config) {
        return {
            ngModule: HotToastModule,
            providers: [{ provide: ToastConfig, useValue: config }],
        };
    }
}
HotToastModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    HotToastContainerComponent,
                    HotToastComponent,
                    AnimatedIconComponent,
                    IndicatorComponent,
                    CheckMarkComponent,
                    ErrorComponent,
                    LoaderComponent,
                    WarningComponent,
                ],
                imports: [CommonModule, DynamicViewModule],
                entryComponents: [HotToastContainerComponent],
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG90LXRvYXN0Lm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ25lYXQvaG90LXRvYXN0L3NyYy8iLCJzb3VyY2VzIjpbImxpYi9ob3QtdG9hc3QubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQXVCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVyRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQUMzRixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUMvRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw0REFBNEQsQ0FBQztBQUNoRyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0RBQW9ELENBQUM7QUFDcEYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHNEQUFzRCxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnRUFBZ0UsQ0FBQztBQUM1RyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQWdCMUYsTUFBTSxPQUFPLGNBQWM7SUFDekIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUE2QjtRQUMxQyxPQUFPO1lBQ0wsUUFBUSxFQUFFLGNBQWM7WUFDeEIsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBQztTQUN4RCxDQUFDO0lBQ0osQ0FBQzs7O1lBcEJGLFFBQVEsU0FBQztnQkFDUixZQUFZLEVBQUU7b0JBQ1osMEJBQTBCO29CQUMxQixpQkFBaUI7b0JBQ2pCLHFCQUFxQjtvQkFDckIsa0JBQWtCO29CQUNsQixrQkFBa0I7b0JBQ2xCLGNBQWM7b0JBQ2QsZUFBZTtvQkFDZixnQkFBZ0I7aUJBQ2pCO2dCQUNELE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSxpQkFBaUIsQ0FBQztnQkFDMUMsZUFBZSxFQUFFLENBQUMsMEJBQTBCLENBQUM7YUFDOUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IER5bmFtaWNWaWV3TW9kdWxlIH0gZnJvbSAnQG5nbmVhdC9vdmVydmlldyc7XG5cbmltcG9ydCB7IEFuaW1hdGVkSWNvbkNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9hbmltYXRlZC1pY29uL2FuaW1hdGVkLWljb24uY29tcG9uZW50JztcbmltcG9ydCB7IEhvdFRvYXN0Q29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2hvdC10b2FzdC9ob3QtdG9hc3QuY29tcG9uZW50JztcbmltcG9ydCB7IENoZWNrTWFya0NvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9pbmRpY2F0b3IvaWNvbnMvY2hlY2ttYXJrL2NoZWNrbWFyay5jb21wb25lbnQnO1xuaW1wb3J0IHsgRXJyb3JDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvaW5kaWNhdG9yL2ljb25zL2Vycm9yL2Vycm9yLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBMb2FkZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvaW5kaWNhdG9yL2ljb25zL2xvYWRlci9sb2FkZXIuY29tcG9uZW50JztcbmltcG9ydCB7IEluZGljYXRvckNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9pbmRpY2F0b3IvaW5kaWNhdG9yLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBUb2FzdENvbmZpZyB9IGZyb20gJy4vaG90LXRvYXN0Lm1vZGVsJztcbmltcG9ydCB7IEhvdFRvYXN0Q29udGFpbmVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2hvdC10b2FzdC1jb250YWluZXIvaG90LXRvYXN0LWNvbnRhaW5lci5jb21wb25lbnQnO1xuaW1wb3J0IHsgV2FybmluZ0NvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9pbmRpY2F0b3IvaWNvbnMvd2FybmluZy93YXJuaW5nLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIEhvdFRvYXN0Q29udGFpbmVyQ29tcG9uZW50LFxuICAgIEhvdFRvYXN0Q29tcG9uZW50LFxuICAgIEFuaW1hdGVkSWNvbkNvbXBvbmVudCxcbiAgICBJbmRpY2F0b3JDb21wb25lbnQsXG4gICAgQ2hlY2tNYXJrQ29tcG9uZW50LFxuICAgIEVycm9yQ29tcG9uZW50LFxuICAgIExvYWRlckNvbXBvbmVudCxcbiAgICBXYXJuaW5nQ29tcG9uZW50LFxuICBdLFxuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBEeW5hbWljVmlld01vZHVsZV0sXG4gIGVudHJ5Q29tcG9uZW50czogW0hvdFRvYXN0Q29udGFpbmVyQ29tcG9uZW50XSxcbn0pXG5leHBvcnQgY2xhc3MgSG90VG9hc3RNb2R1bGUge1xuICBzdGF0aWMgZm9yUm9vdChjb25maWc/OiBQYXJ0aWFsPFRvYXN0Q29uZmlnPik6IE1vZHVsZVdpdGhQcm92aWRlcnM8SG90VG9hc3RNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IEhvdFRvYXN0TW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBUb2FzdENvbmZpZywgdXNlVmFsdWU6IGNvbmZpZyB9XSxcbiAgICB9O1xuICB9XG59XG4iXX0=