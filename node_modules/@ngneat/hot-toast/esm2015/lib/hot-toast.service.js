import { __rest } from "tslib";
import { isPlatformServer } from '@angular/common';
import { Inject, Injectable, Optional, PLATFORM_ID } from '@angular/core';
import { isComponent, isTemplateRef, ViewService } from '@ngneat/overview';
import { tap } from 'rxjs/operators';
import { HotToastContainerComponent } from './components/hot-toast-container/hot-toast-container.component';
import { HOT_TOAST_DEFAULT_TIMEOUTS } from './constants';
import { HotToastRef } from './hot-toast-ref';
import { resolveValueOrFunction, ToastConfig, ToastPersistConfig, } from './hot-toast.model';
import * as i0 from "@angular/core";
import * as i1 from "@ngneat/overview";
import * as i2 from "./hot-toast.model";
export class HotToastService {
    constructor(_viewService, platformId, config) {
        this._viewService = _viewService;
        this.platformId = platformId;
        this._isInitialized = false;
        this._defaultConfig = new ToastConfig();
        this._defaultPersistConfig = new ToastPersistConfig();
        if (config) {
            this._defaultConfig = Object.assign(Object.assign({}, this._defaultConfig), config);
        }
    }
    get defaultConfig() {
        return this._defaultConfig;
    }
    set defaultConfig(config) {
        this._defaultConfig = Object.assign(Object.assign({}, this._defaultConfig), config);
        if (this._componentRef) {
            this._componentRef.setInput('defaultConfig', this._defaultConfig);
        }
    }
    /**
     * Opens up an hot-toast without any pre-configurations
     *
     * @param message The message to show in the hot-toast.
     * @param [options] Additional configuration options for the hot-toast.
     * @returns
     * @memberof HotToastService
     */
    show(message, options) {
        const toast = this.createToast(message || this._defaultConfig.blank.content, 'blank', Object.assign(Object.assign({}, this._defaultConfig), options));
        return toast;
    }
    /**
     * Opens up an hot-toast with pre-configurations for error state
     *
     * @param message The message to show in the hot-toast.
     * @param [options] Additional configuration options for the hot-toast.
     * @returns
     * @memberof HotToastService
     */
    error(message, options) {
        var _a;
        const toast = this.createToast(message || this._defaultConfig.error.content, 'error', Object.assign(Object.assign(Object.assign({}, this._defaultConfig), (_a = this._defaultConfig) === null || _a === void 0 ? void 0 : _a.error), options));
        return toast;
    }
    /**
     * Opens up an hot-toast with pre-configurations for success state
     *
     * @param message The message to show in the hot-toast.
     * @param [options] Additional configuration options for the hot-toast.
     * @returns
     * @memberof HotToastService
     */
    success(message, options) {
        var _a;
        const toast = this.createToast(message || this._defaultConfig.success.content, 'success', Object.assign(Object.assign(Object.assign({}, this._defaultConfig), (_a = this._defaultConfig) === null || _a === void 0 ? void 0 : _a.success), options));
        return toast;
    }
    /**
     * Opens up an hot-toast with pre-configurations for loading state
     *
     * @param message The message to show in the hot-toast.
     * @param [options] Additional configuration options for the hot-toast.
     * @returns
     * @memberof HotToastService
     */
    loading(message, options) {
        var _a;
        const toast = this.createToast(message || this._defaultConfig.loading.content, 'loading', Object.assign(Object.assign(Object.assign({}, this._defaultConfig), (_a = this._defaultConfig) === null || _a === void 0 ? void 0 : _a.loading), options));
        return toast;
    }
    /**
     * Opens up an hot-toast with pre-configurations for warning state
     *
     * @param message The message to show in the hot-toast.
     * @param [options] Additional configuration options for the hot-toast.
     * @returns
     * @memberof HotToastService
     */
    warning(message, options) {
        var _a;
        const toast = this.createToast(message || this._defaultConfig.warning.content, 'warning', Object.assign(Object.assign(Object.assign({}, this._defaultConfig), (_a = this._defaultConfig) === null || _a === void 0 ? void 0 : _a.warning), options));
        return toast;
    }
    /**
     *
     *  Opens up an hot-toast with pre-configurations for loading initially and then changes state based on messages
     *
     * @template T Type of observable
     * @param messages Messages for each state i.e. loading, success and error
     * @returns
     * @memberof HotToastService
     */
    observe(messages) {
        return (source) => {
            var _a, _b;
            let toastRef;
            let start = 0;
            const loadingContent = messages.loading || ((_a = this._defaultConfig.loading) === null || _a === void 0 ? void 0 : _a.content);
            const errorContent = messages.error || ((_b = this._defaultConfig.error) === null || _b === void 0 ? void 0 : _b.content);
            if (loadingContent) {
                toastRef = this.createLoadingToast(loadingContent);
                start = Date.now();
            }
            return source.pipe(tap(Object.assign({ next: (val) => {
                    toastRef = this.createOrUpdateToast(messages, val, toastRef, 'success', start === 0 ? start : Date.now() - start);
                } }, (errorContent && {
                error: (e) => {
                    toastRef = this.createOrUpdateToast(messages, e, toastRef, 'error', start === 0 ? start : Date.now() - start);
                },
            }))));
        };
    }
    /**
     * Closes the hot-toast
     *
     * @param [id] - ID of the toast
     * @since 3.0.1 - If ID is not provided, all toasts will be closed
     */
    close(id) {
        if (this._componentRef) {
            this._componentRef.ref.instance.closeToast(id);
        }
    }
    /**
     * Used for internal purpose only.
     * Creates a container component and attaches it to document.body.
     */
    init() {
        if (isPlatformServer(this.platformId)) {
            return;
        }
        this._componentRef = this._viewService
            .createComponent(HotToastContainerComponent)
            .setInput('defaultConfig', this._defaultConfig)
            .appendTo(document.body);
    }
    createOrUpdateToast(messages, val, toastRef, type, diff) {
        let content = null;
        let options = {};
        ({ content, options } = this.getContentAndOptions(type, messages[type] || (this._defaultConfig[type] ? this._defaultConfig[type].content : '')));
        content = resolveValueOrFunction(content, val);
        if (toastRef) {
            toastRef.updateMessage(content);
            const updatedOptions = Object.assign(Object.assign({ type, duration: diff + HOT_TOAST_DEFAULT_TIMEOUTS[type] }, options), (options.duration && { duration: diff + options.duration }));
            toastRef.updateToast(updatedOptions);
        }
        else {
            this.createToast(content, type, options);
        }
        return toastRef;
    }
    createToast(message, type, options, observableMessages) {
        var _a, _b, _c, _d, _e, _f;
        if (!this._isInitialized) {
            this._isInitialized = true;
            this.init();
        }
        const now = Date.now();
        const id = (_a = options === null || options === void 0 ? void 0 : options.id) !== null && _a !== void 0 ? _a : now.toString();
        if (!this.isDuplicate(id) &&
            (!((_b = options.persist) === null || _b === void 0 ? void 0 : _b.enabled) || (((_c = options.persist) === null || _c === void 0 ? void 0 : _c.enabled) && this.handleStorageValue(id, options)))) {
            const toast = Object.assign({ ariaLive: (_d = options === null || options === void 0 ? void 0 : options.ariaLive) !== null && _d !== void 0 ? _d : 'polite', createdAt: now, duration: (_e = options === null || options === void 0 ? void 0 : options.duration) !== null && _e !== void 0 ? _e : HOT_TOAST_DEFAULT_TIMEOUTS[type], id,
                message, role: (_f = options === null || options === void 0 ? void 0 : options.role) !== null && _f !== void 0 ? _f : 'status', type, visible: true, observableMessages: observableMessages !== null && observableMessages !== void 0 ? observableMessages : undefined }, options);
            return new HotToastRef(toast).appendTo(this._componentRef.ref.instance);
        }
    }
    /**
     * Checks whether any toast with same id is present.
     *
     * @private
     * @param id - Toast ID
     */
    isDuplicate(id) {
        return this._componentRef.ref.instance.hasToast(id);
    }
    /**
     * Creates an entry in local or session storage with count ${defaultConfig.persist.count}, if not present.
     * If present in storage, reduces the count
     * and returns the count.
     * Count can not be less than 0.
     */
    handleStorageValue(id, options) {
        let count = 1;
        const persist = Object.assign(Object.assign({}, this._defaultPersistConfig), options.persist);
        const storage = persist.storage === 'local' ? localStorage : sessionStorage;
        const key = persist.key.replace(/\${id}/g, id);
        let item = storage.getItem(key);
        if (item) {
            item = parseInt(item, 10);
            if (item > 0) {
                count = item - 1;
            }
            else {
                count = item;
            }
        }
        else {
            count = persist.count;
        }
        storage.setItem(key, count.toString());
        return count;
    }
    getContentAndOptions(toastType, message) {
        var _a;
        let content;
        let options = Object.assign(Object.assign({}, this._defaultConfig), this._defaultConfig[toastType]);
        // typeof message === 'object' won't work, cz TemplateRef's type is object
        if (typeof message === 'string' || isTemplateRef(message) || isComponent(message)) {
            content = message;
        }
        else {
            let restOptions;
            (_a = message, { content } = _a, restOptions = __rest(_a, ["content"]));
            options = Object.assign(Object.assign({}, options), restOptions);
        }
        return { content, options };
    }
    createLoadingToast(messages) {
        let content = null;
        let options = {};
        ({ content, options } = this.getContentAndOptions('loading', messages));
        return this.loading(content, options);
    }
}
HotToastService.ɵprov = i0.ɵɵdefineInjectable({ factory: function HotToastService_Factory() { return new HotToastService(i0.ɵɵinject(i1.ViewService), i0.ɵɵinject(i0.PLATFORM_ID), i0.ɵɵinject(i2.ToastConfig, 8)); }, token: HotToastService, providedIn: "root" });
HotToastService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
HotToastService.ctorParameters = () => [
    { type: ViewService },
    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: ToastConfig, decorators: [{ type: Optional }] }
];
//# sourceMappingURL=data:application/json;base64,