{"version":3,"file":"hot-toast.service.d.ts","sources":["hot-toast.service.d.ts"],"names":[],"mappingssourcesContent":["import { Content, ViewService } from '@ngneat/overview';\nimport { Observable } from 'rxjs';\nimport { CreateHotToastRef, HotToastServiceMethods, ObservableMessages, ToastConfig, ToastOptions } from './hot-toast.model';\nexport declare class HotToastService implements HotToastServiceMethods {\n    private _viewService;\n    private platformId;\n    private _isInitialized;\n    private _componentRef;\n    private _defaultConfig;\n    get defaultConfig(): ToastConfig;\n    set defaultConfig(config: ToastConfig);\n    private _defaultPersistConfig;\n    constructor(_viewService: ViewService, platformId: string, config: ToastConfig);\n    /**\n     * Opens up an hot-toast without any pre-configurations\n     *\n     * @param message The message to show in the hot-toast.\n     * @param [options] Additional configuration options for the hot-toast.\n     * @returns\n     * @memberof HotToastService\n     */\n    show<DataType>(message?: Content, options?: ToastOptions<DataType>): CreateHotToastRef<DataType | unknown>;\n    /**\n     * Opens up an hot-toast with pre-configurations for error state\n     *\n     * @param message The message to show in the hot-toast.\n     * @param [options] Additional configuration options for the hot-toast.\n     * @returns\n     * @memberof HotToastService\n     */\n    error<DataType>(message?: Content, options?: ToastOptions<DataType>): CreateHotToastRef<DataType | unknown>;\n    /**\n     * Opens up an hot-toast with pre-configurations for success state\n     *\n     * @param message The message to show in the hot-toast.\n     * @param [options] Additional configuration options for the hot-toast.\n     * @returns\n     * @memberof HotToastService\n     */\n    success<DataType>(message?: Content, options?: ToastOptions<DataType>): CreateHotToastRef<DataType | unknown>;\n    /**\n     * Opens up an hot-toast with pre-configurations for loading state\n     *\n     * @param message The message to show in the hot-toast.\n     * @param [options] Additional configuration options for the hot-toast.\n     * @returns\n     * @memberof HotToastService\n     */\n    loading<DataType>(message?: Content, options?: ToastOptions<DataType>): CreateHotToastRef<DataType | unknown>;\n    /**\n     * Opens up an hot-toast with pre-configurations for warning state\n     *\n     * @param message The message to show in the hot-toast.\n     * @param [options] Additional configuration options for the hot-toast.\n     * @returns\n     * @memberof HotToastService\n     */\n    warning<DataType>(message?: Content, options?: ToastOptions<DataType>): CreateHotToastRef<DataType | unknown>;\n    /**\n     *\n     *  Opens up an hot-toast with pre-configurations for loading initially and then changes state based on messages\n     *\n     * @template T Type of observable\n     * @param messages Messages for each state i.e. loading, success and error\n     * @returns\n     * @memberof HotToastService\n     */\n    observe<T, DataType>(messages: ObservableMessages<T, DataType>): (source: Observable<T>) => Observable<T>;\n    /**\n     * Closes the hot-toast\n     *\n     * @param [id] - ID of the toast\n     * @since 3.0.1 - If ID is not provided, all toasts will be closed\n     */\n    close(id?: string): void;\n    /**\n     * Used for internal purpose only.\n     * Creates a container component and attaches it to document.body.\n     */\n    private init;\n    private createOrUpdateToast;\n    private createToast;\n    /**\n     * Checks whether any toast with same id is present.\n     *\n     * @private\n     * @param id - Toast ID\n     */\n    private isDuplicate;\n    /**\n     * Creates an entry in local or session storage with count ${defaultConfig.persist.count}, if not present.\n     * If present in storage, reduces the count\n     * and returns the count.\n     * Count can not be less than 0.\n     */\n    private handleStorageValue;\n    private getContentAndOptions;\n    private createLoadingToast;\n}\n"]}